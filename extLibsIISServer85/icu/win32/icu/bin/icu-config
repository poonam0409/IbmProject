#!/bin/sh
## -*-sh-*-
#set -x
# BEGIN of icu-config-top
#******************************************************************************
#   Copyright (C) 1999-2004, International Business Machines
#   Corporation and others.  All Rights Reserved.
#******************************************************************************
# This script is designed to aid configuration of ICU.
# rpath links a library search path right into the binaries.


### END of icu-config-top

## Zero out prefix.
execprefix=
prefix=


loaddefs()
{

# Following from ./config/mh-cygwin-msvc
# Generated automatically from Makefile.inc.in by configure.
## -*-makefile-*-
#******************************************************************************
#   Copyright (C) 1999-2004, International Business Machines
#   Corporation and others.  All Rights Reserved.
#******************************************************************************
# This Makefile.inc is designed to be included into projects which make use
# of the ICU.

# CONTENTS OF THIS FILE
# 1). Base configuration information and linkage
# 2). Variables giving access to ICU tools
# 3). Host information
# 4). Compiler flags and settings 
# 5). Data Packaging directives
# 6). Include of platform make fragment (mh-* file)

##################################################################
#
#       *1*  base configuration information and linkage
#
##################################################################
# The PREFIX is the base of where ICU is installed.
# Inside this directory you should find  bin, lib, include/unicode, 
# etc.  If ICU is not installed in this directory, you must change the
# following line.  There should exist ${prefix}/include/unicode/utypes.h
# for example.
default_prefix="C:/icu"
if [ "x${prefix}" = "x" ]; then prefix="$default_prefix"; fi
exec_prefix="${prefix}"
libdir="${exec_prefix}/lib"
libexecdir="${exec_prefix}/libexec"
bindir="${exec_prefix}/bin"
datadir="${prefix}/share"
sbindir="${exec_prefix}/sbin"

# about the ICU version
VERSION="3.2"
UNICODE_VERSION="4.0.1"

# The prefix for ICU libraries, normally 'icu'
ICUPREFIX="icu"
PACKAGE="icu"
LIBICU="lib${ICUPREFIX}"

# Static library prefix and file extension
STATIC_PREFIX="s"
LIBSICU="lib${STATIC_PREFIX}${ICUPREFIX}"
A="a"

# Suffix at the end of libraries. Usually empty.
ICULIBSUFFIX=""
# ICULIBSUFFIX_VERSION  is non-empty if it is to contain a library
# version. For example, if it is 21, it means libraries are named
# libicuuc21.so for example.

# rpath links a library search path right into the binaries.
## mh-files MUST NOT override RPATHLDFLAGS unless they provide
## equivalent '#SH#' lines for icu-config fixup
default_ENABLE_RPATH="NO"
if [ "x${ENABLE_RPATH}" = "x" ]; then ENABLE_RPATH="$default_ENABLE_RPATH"; fi
RPATHLDFLAGS="${LD_RPATH}${LD_RPATH_PRE}${libdir}"

# icu-config version of above 'if':
case "$ENABLE_RPATH" in 
[yY]*)
	ENABLE_RPATH=YES
	RPATHLDFLAGS="${LD_RPATH}${LD_RPATH_PRE}${libdir}"
	;;

[nN]*)
	ENABLE_RPATH=NO
	RPATHLDFLAGS=""
	;;

*)
	echo $0: Unknown --enable-rpath value ${ENABLE_RPATH} 1>&2
	exit 3
	;;
esac

### To link your application with ICU:
# 1. use LDFLAGS, CFLAGS, etc from above
# 2. link with ${ICULIBS}
# 3. optionally, add one or more of:
#    - ${ICULIBS_I18N}    - i18n library, formatting, etc.
#    - ${ICULIBS_LAYOUT}  - ICU layout library. 
#    - ${ICULIBS_ICUIO}   - ICU stdio equivalent library

ICULIBS_COMMON="-l${ICUPREFIX}uc${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_DATA="-l${ICUPREFIX}data${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_I18N="-l${ICUPREFIX}i18n${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_TOOLUTIL="-l${ICUPREFIX}tu${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_CTESTFW="-l${ICUPREFIX}ctestfw${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_ICUIO="-l${ICUPREFIX}io${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_OBSOLETE="-l${ICUPREFIX}obsolete${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_LAYOUT="-l${ICUPREFIX}le${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_LAYOUTEX="-l${ICUPREFIX}lx${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}"
ICULIBS_BASE="${LIBS} -L${libdir}"

# for icu-config to test with
ICULIBS_COMMON_LIB_NAME="${LIBICU}uc${ICULIBSUFFIX}${ICULIBSUFFIX_VERSION}.${SO}"

# ICULIBS is the set of libraries your application should link
# with usually. Many applications will want to add ${ICULIBS_I18N} as well. 
ICULIBS="${ICULIBS_BASE} ${ICULIBS_I18N} ${ICULIBS_COMMON} ${ICULIBS_DATA} "

##################################################################
#
#       *2*  access to ICU tools
#
##################################################################
# Environment variable to set a runtime search path
#   (Overridden when necessary in -mh files)
LDLIBRARYPATH_ENVVAR="LD_LIBRARY_PATH"

# Versioned target for a shared library
## FINAL_SO_TARGET = ${SO_TARGET}.${SO_TARGET_VERSION}
## MIDDLE_SO_TARGET = ${SO_TARGET}.${SO_TARGET_VERSION_MAJOR}

# Access to important ICU tools.
# Use as follows:  ${INVOKE} ${GENRB} arguments .. 
INVOKE="${LDLIBRARYPATH_ENVVAR}=${libdir}:$$${LDLIBRARYPATH_ENVVAR} ${LEAK_CHECKER}"
GENCCODE="${sbindir}/genccode"
GENCMN="${sbindir}/gencmn"
GENRB="${bindir}/genrb"
PKGDATA="${bindir}/pkgdata"

##################################################################
#
#       *3*  Information about the host
#
##################################################################

# Information about the host that 'configure' was run on.
host="i686-pc-cygwin"
host_alias="i686-pc-cygwin"
host_cpu="i686"
host_vendor="pc"
host_os="cygwin"
# Our platform canonical name (as determined by configure)
# this is a #define value (i.e. U_XXXX or XXXX)
platform="U_CYGWIN"

##################################################################
#
#       *4*  compiler flags and misc. options
#
##################################################################
AIX_SHLIB="makeC++SharedLib_r"
AR="/usr/bin/ar"
CC="cl"
CFLAGS="/O2 /Ob2 ${THREADSCFLAGS} "
CPP="cl -nologo -E"
CPPFLAGS="${THREADSCPPFLAGS} ${LIBCPPFLAGS} -I${prefix}/include"
CXX="cl"
CXXFLAGS="/O2 /Ob2 ${THREADSCXXFLAGS} "
DEFAULT_MODE="dll"
DEFS="-DHAVE_CONFIG_H "
FFLAGS=""
INSTALL="/usr/bin/install -c"
INSTALL_DATA="${INSTALL} -m 644"
INSTALL_PROGRAM="${INSTALL}"
INSTALL_SCRIPT="${INSTALL_PROGRAM}"
LDFLAGS="${RPATHLDFLAGS}"
LIBS="-lm  "
LIB_M=""
LIB_VERSION="32.0"
LIB_VERSION_MAJOR="32"
MKINSTALLDIRS="${SHELL} ${pkgdatadir}/mkinstalldirs"
RANLIB="ranlib"
RMV="rm -rf"
SHELL="/bin/sh"
SHLIB_c="${CC} ${DEFS} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} -shared"
SHLIB_cc="${CXX} ${DEFS} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -shared"
U_IS_BIG_ENDIAN="0"
includedir="${prefix}/include"
infodir="${prefix}/info"
ld_rpath_suf=""
localstatedir="${prefix}/var"
mandir="${prefix}/man"
oldincludedir="/usr/include"
program_transform_name="s,x,x,"
sharedstatedir="${prefix}/com"
sysconfdir="${prefix}/etc"
INSTALL_L="${INSTALL_DATA}"

##################################################################
#
#       *5* packaging options and directories
#
##################################################################

pkgdatadir="${datadir}/${PACKAGE}${ICULIBSUFFIX}/${VERSION}"
pkglibdir="${libdir}/${PACKAGE}${ICULIBSUFFIX}/${VERSION}"

# The basename of the ICU data file (i.e. icudt21b )
ICUDATA_NAME="icudt32l"

# Defaults for pkgdata's mode and directories
# The default data dir changes depending on what packaging mode 
# is being used
if [ "x$PKGDATA_MODE" = "x" ];
then
PKGDATA_MODE="dll"
fi

case "$PKGDATA_MODE" in
common)
ICUDATA_DIR="${pkgdatadir}"
ICUPKGDATA_DIR="${ICUDATA_DIR}"
;;
dll)
ICUDATA_DIR="${pkgdatadir}"
ICUPKGDATA_DIR="${libdir}"
;;
*)
ICUDATA_DIR="${pkgdatadir}"
ICUPKGDATA_DIR="${ICUDATA_DIR}"
;;

esac

GENCCODE_ASSEMBLY=""

##################################################################
#
#       *6* Inclusion of platform make fragment (mh-* file)
#
##################################################################
# The mh- file ("make fragment") for the platform is included here. 
# It may override the above settings.
# It is put last so that the mh-file can override anything.

## Cygwin-specific setup
## Copyright (c) 2001-2004, International Business Machines Corporation and
## others. All Rights Reserved.

# We install sbin tools into the same bin directory because
# pkgdata needs some of the tools in sbin, and we can't always depend on
# icu-config working on Windows.
sbindir="${bindir}"

## Commands to generate dependency files
GEN_DEPS_c=":"
GEN_DEPS_cc=":"
#GEN_DEPS.c=	${COMPILE.c} /E
#GEN_DEPS.cc=	${COMPILE.cc} /E

## Flags to create/use a static library
## Make sure that the static libraries can be built and used
CPPFLAGS="${CPPFLAGS}  -DU_STATIC_IMPLEMENTATION"
## Make sure that the static libraries can be built
STATICCPPFLAGS="-DU_STATIC_IMPLEMENTATION"

## Flags for position independent code
SHAREDLIBCFLAGS=""
SHAREDLIBCXXFLAGS=""
SHAREDLIBCPPFLAGS=""

## Additional flags when building libraries and with threads
LIBCPPFLAGS=""

# /MDd means 'compiles and links a debugable multithreaded program with DLL'
THREADSCFLAGS="${THREADSCFLAGS}  /MDd"
THREADSCXXFLAGS="${THREADSCXXFLAGS}  /MDd"
# The debug flags are defined here because configure can't handle them.
CFLAGS="${CFLAGS} /Zi"
CXXFLAGS="${CXXFLAGS} /Zi"
LDFLAGS="${LDFLAGS} /DEBUG"
# /MD means 'compiles and links a multithreaded program with DLL'
THREADSCFLAGS="${THREADSCFLAGS}  /MD"
THREADSCXXFLAGS="${THREADSCXXFLAGS}  /MD"

# Make sure that assertions are disabled
CPPFLAGS="${CPPFLAGS} -DU_RELEASE=1"

# /GF pools strings and places them into read-only memory
# /GX enables exception handling
CFLAGS="${CFLAGS}  /GF"
CXXFLAGS="${CXXFLAGS}  /GF /GX"
CPPFLAGS="${CPPFLAGS} /nologo"
DEFS="${DEFS} -DWIN32"
LDFLAGS="${LDFLAGS} /nologo"

# Commands to compile
COMPILE_c="${CC} ${CPPFLAGS} ${DEFS} ${CFLAGS} /c"
COMPILE_cc="${CXX} ${CPPFLAGS} ${DEFS} ${CXXFLAGS} /c"

# Commands to link
LINK_c="LINK.EXE /subsystem:console ${LDFLAGS}"
LINK_cc="LINK.EXE /subsystem:console ${LDFLAGS}"

## Commands to make a shared library
SHLIB_c="LINK.EXE /subsystem:console /DLL ${LDFLAGS}"
SHLIB_cc="LINK.EXE /subsystem:console /DLL ${LDFLAGS}"

## Compiler switch to embed a runtime search path
LD_RPATH=""
LD_RPATH_PRE=""

## Compiler switch to embed a library name
## LD_SONAME = /IMPLIB:${SO_TARGET:.dll=.lib}

## Shared object suffix
SO="dll"
## Non-shared intermediate object suffix
STATIC_O="ao"
# OUTOPT is for creating a specific output name
OUTOPT="/out:"

# Static library prefix and file extension
LIBSICU="${STATIC_PREFIX}${ICUPREFIX}"
A="lib"

## An import library is needed for z/OS and MSVC
IMPORT_LIB_EXT=".lib"

LIBPREFIX=""
DEFAULT_LIBS="advapi32.lib"

# Change the stubnames so that poorly working FAT disks and installation programs can work.
# This is also for backwards compatibility.
DATA_STUBNAME="dt"
I18N_STUBNAME="in"
LIBICU="${STATIC_PREFIX_WHEN_USED}${ICUPREFIX}"

## Link commands to link to ICU libs
LIBICUDT="${top_builddir}/stubdata/${LIBICU}${DATA_STUBNAME}${ICULIBSUFFIX}.lib"
LIBICUUC="${LIBDIR}/${LIBICU}${COMMON_STUBNAME}${ICULIBSUFFIX}.lib ${LIBICUDT}"
LIBICUI18N="${LIBDIR}/${LIBICU}${I18N_STUBNAME}${ICULIBSUFFIX}.lib"
LIBICULE="${LIBDIR}/${LIBICU}${LAYOUT_STUBNAME}${ICULIBSUFFIX}.lib"
LIBICULX="${LIBDIR}/${LIBICU}${LAYOUTEX_STUBNAME}${ICULIBSUFFIX}.lib"
LIBICUIO="${LIBDIR}/${LIBICU}${IO_STUBNAME}${ICULIBSUFFIX}.lib"
LIBCTESTFW="${top_builddir}/tools/ctestfw/${LIBICU}${CTESTFW_STUBNAME}${ICULIBSUFFIX}.lib"
LIBICUTOOLUTIL="${LIBDIR}/${LIBICU}${TOOLUTIL_STUBNAME}${ICULIBSUFFIX}.lib"

## These are the library specific LDFLAGS
LDFLAGSICUDT="# Unused for now."
LDFLAGSICUUC="/base:"0x4a800000"# in-uc = 1MB"
LDFLAGSICUI18N="/base:"0x4a900000"# io-in = 2MB"
LDFLAGSICUIO="/base:"0x4ab00000"# le-io = 1MB"
LDFLAGSICULE="/base:"0x4ac00000"# lx-le = 512KB"
LDFLAGSICULX="/base:"0x4ac80000""
LDFLAGSCTESTFW="# Unused for now."
LDFLAGSICUTOOLUTIL="/base:"0x4ac00000"# Same as layout. Layout and tools probably won't mix."

# Current full path directory.
# Current full path directory for use in source code in a -D compiler option.

SOURCE_FILE="$<"

## Compilation rules

## Dependency rules
## This is a start to how depdendencies could work
# The commented out rules may not properly delete the file when ^C is pressed
#   or the compiler fails.
# make currently doesn't like rules with C:\\PROGRA~1\\.. in the depedency.
#   So system headers are ignored by ignoring \\
#	@echo -n "generating dependency information for "
#	@echo -n "$@ ${basename $<}.o : " > $@
#	@${SHELL} -ec '${GEN_DEPS.c} $< \
#		| grep "#line 1 " | grep -v \\\\ | cut -d " " -f 3 \
#		| /usr/bin/sort -u | sed s/\"$$/\\\\/ | sed s/^\"/\	/ >> $@ \
#		|| (rm -f $@ && echo $@ && false)'

#	@echo -n "generating dependency information for "
#	@echo -n "$@ ${basename $<}.o : " > $@
#	@${SHELL} -ec '${GEN_DEPS.cc} $< \
#		| grep "#line 1 " | grep -v \\\\ | cut -d " " -f 3 \
#		| /usr/bin/sort -u | sed s/\"$$/\\\\/ | sed s/^\"/\	/ >> $@ \
#		|| (rm -f $@ && echo $@ && false)'

## Compile a Windows resource file

## Versioned target for a shared library.
## FINAL_SO_TARGET= ${basename $(SO_TARGET})${SO_TARGET_VERSION_MAJOR}.${SO}
## MIDDLE_SO_TARGET=${FINAL_SO_TARGET}

## Special pkgdata information that is needed
PKGDATA_VERSIONING="-r ${SO_TARGET_VERSION_MAJOR}"

## Versioned import library names. The library names are versioned,
## but the import libraries do not need versioning.
IMPORT_LIB="${basename $(SO_TARGET})${IMPORT_LIB_EXT}"
MIDDLE_IMPORT_LIB="${IMPORT_LIB}"
FINAL_IMPORT_LIB="${MIDDLE_IMPORT_LIB}"

## Versioned libraries rules
#%${SO_TARGET_VERSION_MAJOR}.${SO}: %${SO_TARGET_VERSION}.${SO}
#	${RM} $@ && cp ${<F} $@
# The following rule is a no op. We don't want symbolic links
#	${RM} $@ && ln -s ${<F} $@

## Install libraries as executable
INSTALL_L="${INSTALL_PROGRAM}"

# Environment variable to set a runtime search path
LDLIBRARYPATH_ENVVAR="PATH"

# These are needed to allow the pkgdata nmake files to work
PKGDATA_OPTS="-v"
PKGDATA_INVOKE_OPTS="MAKEFLAGS="

# Include the version information in the shared library
ENABLE_SO_VERSION_DATA="1"

## End Cygwin-specific setup

## -*-sh-*-
## BEGIN of icu-config-bottom.
## Copyright (c) 2002-2004, International Business Machines Corporation and
## others. All Rights Reserved.

ICUUC_FILE=${libdir}/${ICULIBS_COMMON_LIB_NAME}
    
#  echo ENABLE RPATH $ENABLE_RPATH and RPATHLDFLAGS=${RPATH_LDFLAGS}
if [ "x$PKGDATA_MODE" = "x" ]; then
    PKGDATA_MODE=dll
fi

}

## The actual code of icu-config goes here.

ME=`basename $0`

allflags()
{
    echo "  --bindir               Print binary directory path (bin)"
    echo "  --cc                   Print C compiler used [CC]"
    echo "  --cflags               Print C compiler flags [CFLAGS]"
    echo "  --cflags-dynamic       Print additional C flags for"
    echo "                             building shared libraries."
    echo "  --cppflags             Print C Preprocessor flags [CPPFLAGS]"
    echo "  --cppflags-dynamic     Print additional C Preprocessor flags for"
    echo "                             building shared libraries."
    echo "  --cppflags-searchpath  Print only -I include directives  (-Iinclude)"
    echo "  --cxx                  Print C++ compiler used [CXX]"
    echo "  --cxxflags             Print C++ compiler flags [CXXFLAGS]"
    echo "  --cxxflags-dynamic     Print additional C++ flags for"
    echo "                             building shared libraries."
    echo "  --detect-prefix        Attempt to detect prefix based on PATH"
    echo "  --exec-prefix          Print prefix for executables (/bin)"
    echo "  --exists               Return with 0 status if ICU exists else fail"
    echo "  --help, -?, --usage    Print this message"
    echo "  --icudata              Print shortname of ICU data file (icudt21l)"
    echo "  --icudata-install-dir  Print path to install data to - use as --install option to pkgdata(1)"
    echo "  --icudata-mode         Print default ICU pkgdata mode (dll) - use as --mode option to pkgdata(1)."
    echo "  --icudatadir           Print path to packaged archive data. Can set as [ICU_DATA]"
    echo "  --invoke               Print commands to invoke an ICU program"
    echo "  --invoke=<prog>        Print commands to invoke an ICU program named <prog> (ex: genrb)" 
    echo "  --ldflags              Print -L search path and -l libraries to link with ICU [LDFLAGS].  This is for the data, uc (common), and i18n libraries only.  "
    echo "  --ldflags-layout       Print ICU layout engine link directive. Use in addition to --ldflags"
    echo "  --ldflags-libsonly     Same as --ldflags, but only the -l directives"
    echo "  --ldflags-searchpath   Print only -L (search path) directive"
    echo "  --ldflags-system       Print only system libs ICU links with (-lpthread, -lm)"
    echo "  --ldflags-icuio        Print ICU icuio link directive. Use in addition to --ldflags "
    echo "  --ldflags-obsolete     Print ICU obsolete link directive. Use in addition to --ldflags. (requires icuapps/obsolete to be built and installed.) "
    echo "  --mandir               Print manpage (man) path"
    echo "  --prefix               Print PREFIX to icu install (/usr/local)"
    echo "  --prefix=XXX           Set prefix to XXX for remainder of command"
    echo "  --sbindir              Print system binary path (sbin) "
    echo "  --shared-datadir       Print shared data (share) path. This is NOT the ICU data dir."
    echo "  --shlib-c              Print the command to compile and build C shared libraries with ICU"
    echo "  --shlib-cc             Print the command to compile and build C++ shared libraries with ICU"
    echo "  --sysconfdir           Print system config (etc) path"
    echo "  --unicode-version      Print version of Unicode data used in ICU ($UNICODE_VERSION)"
    echo "  --version              Print ICU version ($VERSION)"
    echo "  --incfile              Print path to Makefile.inc (for -O option of pkgdata)"
}

## Print the normal usage message
shortusage()
{
    echo "usage: ${ME} " `allflags | cut -c-25 | sed -e 's%.*%[ & ]%'`
}


usage()
{
    echo "${ME}: icu-config: ICU configuration helper script"
    echo
    echo "The most commonly used options will be --cflags, --cxxflags, --cppflags, and --ldflags."
    echo 'Example (in make):   CPFLAGS=$(shell icu-config --cppflags)'
    echo '                     LDFLAGS=$(shell icu-config --ldflags)'
    echo "                     (etc).."
    echo
    echo "Usage:"
    allflags

    echo 
    echo " [Brackets] show MAKE variable equivalents,  (parenthesis) show example output"
    echo
    echo "Copyright (c) 2002, International Business Machines Corporation and others. All Rights Reserved."
}

## Check the sanity of current variables
sanity()
{
    if [ ! -f ${ICUUC_FILE} ];
    then
	echo "### $ME: Can't find ${ICUUC_FILE} - ICU prefix is wrong."  1>&2
	echo "###      Try the --prefix= or --exec-prefix= options " 1>&2
	echo "###      or --detect-prefix"
	echo "### $ME: Exitting." 1>&2
	exit 2
    fi
}

## Main starts here.

if [ $# -lt 1 ]; then
    shortusage
    exit 1
fi


# Load our variables from autoconf
# ALWAYS load twice because of dependencies
loaddefs
loaddefs
sanity

while [ $# -gt 0 ];
do
    arg="$1"
    var=`echo $arg | sed -e 's/^[^=]*=//'`
#    echo "### processing $arg" 1>&2
    case "$arg" in

        # undocumented.
	--debug)
	    set -x
	    ;;

        --so)
            echo $SO
            ;;

	--bindir)
	    echo $bindir
	    ;;

	--libdir)
	    echo $libdir
	    ;;

	--exists)
	    sanity
	    ;;

	--sbindir)
	    echo $sbindir
	    ;;

	--invoke=*)
	    QUOT="'"
            CMD="${var}"

            # If it's not a locally executable command (1st choice) then 
            # search for it in the ICU directories. 
            if [ ! -x ${CMD} ]; then
                if [ -x ${bindir}/${var} ]; then
                    CMD="${bindir}/${var}"
                fi
                if [ -x ${sbindir}/${var} ]; then
                    CMD="${sbindir}/${var}"
                fi
            fi

	    echo "env ${QUOT}${LDLIBRARYPATH_ENVVAR}=${libdir}:"'${'"${LDLIBRARYPATH_ENVVAR}"'}'${QUOT} ${CMD}
	    ;;

	--invoke)
	    QUOT="'"
	    echo "env ${QUOT}${LDLIBRARYPATH_ENVVAR}=${libdir}:"'${'"${LDLIBRARYPATH_ENVVAR}"'}'${QUOT}
	    ;;

	--cflags)
	    echo $CFLAGS
	    ;;
	    
	--cc)
	    echo $CC
	    ;;
	    
	--cxx)
	    echo $CXX
	    ;;

	--cxxflags)
	    echo $CXXFLAGS
	    ;;

	--cppflags)
	    # Don't echo the -I. - it's unneeded.
	    echo $CPPFLAGS | sed -e 's/-I. //'
	    ;;

	--cppflags-searchpath)
	    echo -I${prefix}/include
	    ;;

	--cppflags-dynamic)
	    echo $SHAREDLIBCPPFLAGS
	    ;;

	--cxxflags-dynamic)
	    echo $SHAREDLIBCXXFLAGS
	    ;;

	--cflags-dynamic)
	    echo $SHAREDLIBCFLAGS
	    ;;

	--ldflags-system)
	    echo $LIBS
	    ;;

	--ldflags)
	    echo $LDFLAGS $ICULIBS $LIBS 
# $RPATH_LDFLAGS
	    ;;

	--ldflags-libsonly)
	    echo $ICULIBS_I18N $ICULIBS_COMMON $ICULIBS_DATA 
	    ;;

	--ldflags-icuio)
	    echo $ICULIBS_ICUIO
	    ;;

	--ldflags-obsolete)
	    echo $ICULIBS_OBSOLETE
	    ;;

	--ldflags-toolutil)
	    echo $ICULIBS_TOOLUTIL
	    ;;

	--ldflags-layout)
	    echo $ICULIBS_LAYOUT $ICULIBS_LAYOUTEX
	    ;;

	--ldflags-searchpath)
	    echo -L${libdir}
	    ;;

	--detect-prefix)
	    HERE=`echo $0 | sed -e "s/$ME//g"`
	    if [ -f $HERE/../lib/${ICULIBS_COMMON_LIB_NAME} ]; then
		prefix=$HERE/..
		echo "## Using --prefix=${prefix}" 1>&2
	    fi
	    loaddefs
	    loaddefs
	    sanity
	    ;;

	--exec-prefix)
	    echo $exec_prefix
	    ;;

	--prefix)
	    echo $prefix
	    ;;

	--prefix=*)
	    prefix=$var
	    loaddefs
	    loaddefs
	    sanity
	    ;;

	--sysconfdir)
	    echo $sysconfdir
	    ;;

	--mandir)
	    echo $mandir
	    ;;

	--shared-datadir)
	    echo $datadir
	    ;;

        --incfile)
	    echo $pkglibdir/Makefile.inc
	    ;;

	--icudata)
	    echo $ICUDATA_NAME
	    ;;

	--icudata-mode)
	    echo $PKGDATA_MODE
	    ;;

	--icudata-install-dir)
            echo $ICUPKGDATA_DIR
	    ;;
	    
	--icudatadir)
	    echo $ICUDATA_DIR
	    ;;

	--shlib-c)
	    echo $SHLIB_c
	    ;;

	--shlib-cc)
	    echo $SHLIB_cc
	    ;;

	--version)
            echo $VERSION
            ;;

        --unicode-version)
            echo $UNICODE_VERSION
            ;;

	--help)
	    usage
	    exit 0
	    ;;

	--usage)
	    usage
	    exit 0
	    ;;

#	--enable-rpath=*)
#	    ENABLE_RPATH=$var
#	    loaddefs
#	    ;;

	-?)
	    usage
	    exit 0
	    ;;

        *)
	    echo ${ME}: ERROR Unknown Option $arg 1>&2
            echo 1>&2
            shortusage 1>&2
	    echo "### $ME: Exitting." 1>&2
            exit 1;
            ;;
    esac
    shift
done

# Check once before we quit (will check last used prefix)
sanity
## END of icu-config-bottom

exit 0

# Rebuilt on Wed Nov 17 12:21:18 PST 2004
