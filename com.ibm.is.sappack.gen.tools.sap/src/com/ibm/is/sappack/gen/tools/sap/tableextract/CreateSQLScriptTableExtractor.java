//---------------------------------------------------------------------------  
// IBM Confidential                                                            
//                                                                             
// OCO Source Materials                                                        
//                                                                             
// 5724-Q55                                                                 
//                                                                             
// (C) Copyright IBM Corporation 2009, 2011                                              
//                                                                             
// The source code for this program is not published or otherwise              
// divested of its trade secrets, irrespective of what has been                
// deposited with the U.S. Copyright Office.                                     
//---------------------------------------------------------------------------  
//-*-************************************************************************  
//                                                                             
// IBM InfoSphere Information Server Packs for SAP Applications 
//                                                                             
// Module Name : com.ibm.is.sappack.gen.tools.sap.tableextract
//                                                                             
//*************************-END OF SPECIFICATIONS-***************************
package com.ibm.is.sappack.gen.tools.sap.tableextract;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.datatools.modelbase.sql.datatypes.CharacterStringDataType;
import org.eclipse.datatools.modelbase.sql.datatypes.DataType;
import org.eclipse.datatools.modelbase.sql.datatypes.DateDataType;
import org.eclipse.datatools.modelbase.sql.datatypes.NumericalDataType;
import org.eclipse.datatools.modelbase.sql.tables.Column;
import org.eclipse.datatools.modelbase.sql.tables.Table;

import com.ibm.db.models.db2.luw.LUWColumn;
import com.ibm.iis.sappack.gen.common.ui.connections.SapSystem;
import com.ibm.is.sappack.gen.tools.sap.utilities.SAPTableExtractor;
import com.ibm.is.sappack.gen.tools.sap.utilities.SAPTableExtractor.Result;

public class CreateSQLScriptTableExtractor extends TableExtractor {
	static String copyright() {
		return com.ibm.is.sappack.gen.tools.sap.tableextract.Copyright.IBM_COPYRIGHT_SHORT;
	}

	StringBuffer sqlFileContents;
	IFile sqlFile;
	boolean generateDeleteStatement;
	int commitCount;

	final String STMT_TERMIN = "!"; //$NON-NLS-1$

	public CreateSQLScriptTableExtractor(List<Table> tables, SapSystem sapSystem, IFile sqlFile, boolean generateDeleteStatement, int commitCount, int maxRows) {
		super(tables, sapSystem, maxRows);
		this.sqlFile = sqlFile;
		this.generateDeleteStatement = generateDeleteStatement;
		this.commitCount = commitCount;
	}

	protected void processTable(Table table, String insertStatementPrefix, SAPTableExtractor.Result sapResult, IProgressMonitor monitor) {
		List<Column> columns = new ArrayList<Column>(table.getColumns());
		final String STMT_TERMIN = "!"; //$NON-NLS-1$
		String fullTableName = table.getSchema().getName() + "." + table.getName(); //$NON-NLS-1$
		sqlFileContents.append("-- Table " + fullTableName + NL); //$NON-NLS-1$
		if (this.generateDeleteStatement) {
			sqlFileContents.append("DELETE FROM " + fullTableName + STMT_TERMIN + NL); //$NON-NLS-1$
		}
		String singleSqlFile = createSQLScript(insertStatementPrefix, columns, sapResult, STMT_TERMIN, monitor);
		sqlFileContents.append(singleSqlFile);
	}

	@Override
	public void extractTables(IProgressMonitor monitor) throws Exception {
		if (monitor == null) {
			monitor = new NullProgressMonitor();
		}
		sqlFileContents = new StringBuffer();
		sqlFileContents.append("--<ScriptOptions statementTerminator=\"" + STMT_TERMIN + "\"/>" + NL); //$NON-NLS-1$ //$NON-NLS-2$
		sqlFileContents.append(NL);
		String user = System.getProperty("user.name"); //$NON-NLS-1$
		String date = (new Date()).toString();

		StringBuffer tableString = new StringBuffer();
		for (int i = 0; i < this.tables.size(); i++) {
			if (i > 0) {
				tableString.append(", "); //$NON-NLS-1$
			}
			tableString.append(this.tables.get(i).getName());
		}
		sqlFileContents.append("-- " + NL); //$NON-NLS-1$
		sqlFileContents.append("-- SQL script generated by user " + user + " on " + date + NL); //$NON-NLS-1$ //$NON-NLS-2$
		sqlFileContents.append("-- SAP System: " + sapSystem.getName() + NL); //$NON-NLS-1$
		sqlFileContents.append("-- Tables: " + tableString.toString() + NL); //$NON-NLS-1$
		sqlFileContents.append("-- " + NL); //$NON-NLS-1$

		super.extractTables(monitor);

		if (monitor.isCanceled()) {
			return;
		}
		// TODO choose proper codepage
		byte[] b = sqlFileContents.toString().getBytes("UTF-8"); //$NON-NLS-1$
		InputStream is = new ByteArrayInputStream(b);
		sqlFile.create(is, true, monitor);
		sqlFile.setCharset("UTF-8", monitor); //$NON-NLS-1$
	}

	private String createSQLScript(String insertStatementPrefix, List<Column> columns, Result sapResult, String stmTerminator, IProgressMonitor monitor) {
		StringBuffer sqlFile = new StringBuffer();
		int rowNumSinceLastCommit = 0;
		while (sapResult.nextRow()) {
			sqlFile.append(insertStatementPrefix);
			sqlFile.append(" VALUES ("); //$NON-NLS-1$
			Map<String, String> row = sapResult.getRow();

			for (int i = 0; i < columns.size(); i++) {
				if (i > 0) {
					sqlFile.append(", "); //$NON-NLS-1$
				}
				Column col = columns.get(i);
				String val = row.get(col.getName());
				this.convertStringValueToJDBCString(col, val, sqlFile);
			}

			sqlFile.append(")"); //$NON-NLS-1$
			sqlFile.append(stmTerminator);
			sqlFile.append(NL);
			rowNumSinceLastCommit++;
			if (this.commitCount > 0 && rowNumSinceLastCommit >= this.commitCount) {
				sqlFile.append("COMMIT" + stmTerminator + NL); //$NON-NLS-1$
				rowNumSinceLastCommit = 0;
			}
			if (monitor.isCanceled()) {
				return sqlFile.toString();
			}
		}
		sqlFile.append("COMMIT" + stmTerminator + NL); //$NON-NLS-1$
		sqlFile.append(NL);
		return sqlFile.toString();
	}

	private void convertStringValueToJDBCString(Column col, String value, StringBuffer buf) {
		if (value == null) {
			buf.append("NULL"); //$NON-NLS-1$
			return;
			//	 return "NULL";
		}
		DataType dt = col.getDataType();
		if (dt instanceof CharacterStringDataType) {
			CharacterStringDataType csdt = (CharacterStringDataType) dt;
			if (col instanceof LUWColumn) {
				// DB2 workaround
				int l = csdt.getLength();
				value = DatabaseTableExtractor.shortenStringToUTF8Length(value, l);
			}
			buf.append("'"); //$NON-NLS-1$
			value = value.replaceAll("'", "''"); //$NON-NLS-1$ //$NON-NLS-2$
			buf.append(value);
			buf.append("'"); //$NON-NLS-1$
			return;
		} else if (dt instanceof DateDataType) {
			String day = value.substring(0, 2);
			String month = value.substring(2, 4);
			String year = value.substring(4);
			buf.append(year);
			buf.append("-"); //$NON-NLS-1$
			buf.append(month);
			buf.append("-"); //$NON-NLS-1$
			buf.append(day);
			return; // year + "-" + month + "-" + day;
		} else if (dt instanceof NumericalDataType) {
			// skip leading '*' symbols
			int i = 0;
			while (value.charAt(i) == '*') {
				i++;
			}
			String doubleVal = value.substring(i);
			buf.append(doubleVal);
			return; // doubleVal;
		}
		//		return value;
	}

}
