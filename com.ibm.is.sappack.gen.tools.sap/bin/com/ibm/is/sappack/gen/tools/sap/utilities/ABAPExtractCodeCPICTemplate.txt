*-------------------------------------------------------------------*
* Report Name: #SAPPACK_PROGNAME#
* Generated by IBM InfoSphere Rapid Generator for SAP Applications
* Generated at: #SAPPACK_TIME#
*
* CPI-C Special Notes:
* 1) To execute this job, user type must be CPI-c.
* 2) Add communication partner in TXCOM using SM54.
*-------------------------------------------------------------------*
REPORT #SAPPACK_PROGNAME#.


* Step 1. Declare Table
TABLES:
     #SAPPACK_TABLE#.


* Step 2. Declare Structure
DATA:  BEGIN OF ST_1 OCCURS 1,
#SAPPACK_ST_1DECLARATIONS#
END OF ST_1.
DATA:  IT_1 LIKE ST_1 OCCURS 0 WITH HEADER LINE.


* Declare Structure for INTO clause
DATA:  BEGIN OF ST_2 OCCURS 1,
#SAPPACK_ST_2DECLARATIONS#
END OF ST_2.


* Step 3. Table and structure for CPI-C
TABLES:  TCPIC.
INCLUDE: RSCPICDF.


* Step 4. Declare CPI-C communication variables
DATA:  COM_ID(8)     TYPE C,    " Communication ID
       COM_IN(100)   TYPE C,    " Init signal buffer
       COM_D(4)      TYPE X,    " Dataset Info
       COM_S(4)      TYPE X,    " Status Info
       COM_L(4)      TYPE X,    " Buffer Length
       D_PACK(32000) TYPE C,    " CPI-C Data Pack
       D_OFFSET      TYPE I,    " Offset
       D_LEN         TYPE I,    " Next Pack Length
       D_STATUS      TYPE I.    " Last Transfer Status
EXIT.


*-------------------------------------------------------------------*
* Form CPIC is a dynamic call and will be used by                    
* communication partner like DataStage.                              
*-------------------------------------------------------------------*


FORM CPIC.

*#ADDITIONAL_ABAP_CODE#


* Step 5. CPI-C Initialization
*-------------------------------------------------------------------*
* Establish communication, get communication ID                      
*-------------------------------------------------------------------*
COMMUNICATION ACCEPT ID COM_ID.
IF SY-SUBRC <> 0.
    EXIT.
ENDIF.


*-------------------------------------------------------------------*
* Receive init signal from communication partner                     
*-------------------------------------------------------------------*
COM_S = 0.
WHILE COM_S = 0.
    COMMUNICATION RECEIVE ID COM_ID BUFFER COM_IN DATAINFO COM_D
                  STATUSINFO COM_S
                  RECEIVED   COM_L.
    IF SY-SUBRC <> CM_OK AND SY-SUBRC <> CM_DEALLOCATED_NORMAL.
        EXIT.
    ENDIF.
ENDWHILE.


D_PACK = ''.
D_OFFSET = 0.
D_STATUS = 0.
D_LEN = D_OFFSET + #SAPPACK_OFFSET#.     
      
CLEAR IT_1.
REFRESH IT_1.
SELECT
#SAPPACK_SELECTCLAUSE#
INTO (#SAPPACK_INTOCLAUSE#)
FROM
#SAPPACK_TABLE# AS #SAPPACK_TABLE#. 
#SAPPACK_ITSETCLAUSE#
      IF D_STATUS > 0.
         EXIT.
      ENDIF.
      IF D_LEN < 16000.
         D_PACK+D_OFFSET(#SAPPACK_OFFSET#) = IT_1.
         D_OFFSET = D_OFFSET + #SAPPACK_OFFSET#.
         D_LEN = D_OFFSET + #SAPPACK_OFFSET#.
         CLEAR IT_1.
         REFRESH IT_1.
      ELSE.
         PERFORM SEND_RECORD USING D_PACK.
         D_PACK = IT_1.
         D_OFFSET = #SAPPACK_OFFSET#.
         D_LEN = D_OFFSET + #SAPPACK_OFFSET#.
      ENDIF.
ENDSELECT.
IF D_STATUS = 0.
   PERFORM SEND_RECORD USING D_PACK.
ENDIF.


ENDFORM.


*-------------------------------------------------------------------*
* Send one record to communication partner                          
*-------------------------------------------------------------------*
FORM SEND_RECORD USING P_REC_BUF.
D_OFFSET = D_OFFSET * 2.
    COMMUNICATION SEND ID COM_ID BUFFER P_REC_BUF LENGTH D_OFFSET.
    IF SY-SUBRC <> 0.
        COMMUNICATION DEALLOCATE ID COM_ID.
        D_STATUS = 1.
        EXIT.
    ENDIF.
ENDFORM.
